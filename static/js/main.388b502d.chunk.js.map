{"version":3,"sources":["axioss.js","Row.js","requests.js","Banner.js","Navbar.js","App.js","index.js"],"names":["instance","axios","create","baseURL","Row","title","fetchUrl","isLargeRow","useState","movies","SetMovies","trailerUrl","SetTrailerUrl","fetchData","a","get","request","data","results","useEffect","className","map","movie","onClick","movieTrailer","name","then","url","urlParams","URLSearchParams","URL","search","catch","error","handleClick","src","poster_path","backdrop_path","alt","id","videoId","opts","height","width","playerVars","autoplay","API_KEY","requests","fetchTrending","fetchNetflixOriginals","fetchTopRated","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","FetchRomnceMovies","fetchDocumentries","Banner","str","n","SetMovie","Math","floor","random","length","style","backgroundImage","backgroundSize","backgroundPosition","original_name","overview","substr","Navbar","show","handleShow","window","addEventListener","scrollY","removeEventListener","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.388b502d.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nconst instance = axios.create({\r\n    baseURL:\"https://api.themoviedb.org/3\",\r\n});\r\nexport default instance;","\r\nimport React,{useState,useEffect} from 'react';\r\nimport  \"./Style.css\"\r\nimport axios from './axioss';\r\nimport YouTube from \"react-youtube\"\r\nimport movieTrailer from \"movie-trailer\"\r\nconst base_url=\"https://image.tmdb.org/t/p/original\";\r\nconst Row = ({title,fetchUrl,isLargeRow}) => {\r\n   \r\nconst[movies,SetMovies]=useState([]);\r\nconst[trailerUrl,SetTrailerUrl]=useState(\"\");\r\nconst  fetchData= async ()=>{\r\n    const request=await axios.get(fetchUrl);\r\n    SetMovies(request.data.results)\r\n    \r\n    return request;   \r\n}\r\nconst handleClick=(movie)=>{\r\n    if(trailerUrl){\r\n        SetTrailerUrl(\"\");\r\n    }else{\r\n        movieTrailer(movie?.name||\" \")\r\n        .then(url=>{\r\n       const urlParams=new URLSearchParams(new URL(url).search)\r\n       SetTrailerUrl(urlParams.get(\"v\"));\r\n\r\n        })\r\n        .catch((error)=>error)\r\n    }\r\n}\r\n\r\nuseEffect(()=>{\r\n    fetchData();\r\n},[fetchUrl]);\r\n\r\nconst opts={height:\"390\",width:\"100%\",\r\nplayerVars:{autoplay:1},}\r\n\r\n    return (\r\n        <div className=\"row\">\r\n           <h2>{title}</h2> \r\n           <div className=\"poster\">\r\n               {movies.map(movie=>(\r\n                  \r\n                   <img\r\n                     key={movie.id} \r\n                     onClick={()=>handleClick(movie)}\r\n                     src={`${base_url}${isLargeRow ? movie.poster_path :movie.backdrop_path}`} \r\n                     alt={movie.title}\r\n                     title={movie.title}\r\n                     className={`poster_img ${isLargeRow && \"poster_largeimg\"}`}/>\r\n                   \r\n               ))}\r\n           </div>\r\n          {trailerUrl && <YouTube videoId={trailerUrl} opts={opts}/>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Row\r\n","const API_KEY = \"378fd6c520f8574346fa45bfe688d238\";\r\n\r\nconst requests = {\r\n  fetchTrending: `/trending/all/week?api_key=${API_KEY}&language=en-US`,\r\n  fetchNetflixOriginals: `/discover/tv?api_key=${API_KEY}&with_networks=213`,\r\n  fetchTopRated: `/movie/top_rated?api_key=${API_KEY}&language=en-US`,\r\n  fetchActionMovies: `/discover/tv?api_key=${API_KEY}&language=en-US&page=1`,\r\n  fetchComedyMovies: `/discover/tv?api_key=${API_KEY}&with_genres=35`,\r\n  fetchHorrorMovies: `/discover/tv?api_key=${API_KEY}&with_genres=27`,\r\n  FetchRomnceMovies: `/discover/tv?api_key=${API_KEY}&language=en-US&page=1`,\r\n  fetchDocumentries: `/discover/tv?api_key=${API_KEY}&with_genres=99`,\r\n};\r\nexport default requests;\r\n","\r\nimport React,{useState,useEffect} from 'react'\r\nimport axios from \"./axioss\"\r\nimport requests from \"./requests\"\r\nimport \"./banner.css\"\r\n\r\nconst Banner = () => {\r\n    const [movie,SetMovie]= useState([]);\r\n\r\nconst fetchData= async()=>{\r\n    const request= await axios.get(requests.fetchNetflixOriginals);\r\n\r\n    SetMovie(request.data.results[Math.floor(Math.random()*request.data.results.length-1)])\r\n    \r\n}\r\n\r\nuseEffect(()=>{\r\nfetchData();\r\n},[])\r\n function truncate(str,n) {\r\n    return str?.length > n ?str.substr(0,n-1) + \"...\" : str;\r\n}\r\n    return (\r\n        <header>\r\n            <div className=\"Banner\" style={{ backgroundImage:`url(\"https://image.tmdb.org/t/p/original/${movie?.backdrop_path}\")` ,\r\n        backgroundSize:\"cover\",backgroundPosition:\"center center\"  }} >\r\n          <div className=\"Banner_content\">\r\n            <h1 className=\"Banner_title\"> {movie?.title || movie?.name || movie?.original_name}</h1>\r\n              <button className=\"buttons\">Play</button>\r\n              <button className=\"buttons\">My List</button>\r\n             <p className=\"description\">{truncate(movie?.overview,150)}</p>\r\n              </div>  \r\n              <div className=\"banner-fade\">\r\n                  </div>  \r\n        </div>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Banner\r\n","import React,{useEffect,useState} from 'react'\r\nimport \"./Navbar.css\"\r\n\r\nconst Navbar = () => {\r\n   \r\n        const [show , handleShow]=useState(false);\r\n    \r\n        useEffect(() => {\r\n            window.addEventListener(\"scroll\",()=>{\r\n                if (window.scrollY>100){\r\n                  handleShow(true);\r\n                }else handleShow(false);\r\n            })\r\n            return () => {\r\n               window.removeEventListener(\"scroll\") ;\r\n            };\r\n        }, []);\r\n    \r\n\r\n    return (\r\n        <div className={`Navbar ${show && \"Nav_black\"}`}>\r\n            <img\r\n            className=\"logo\"\r\n            alt=\"logo\"\r\n            src=\"https://assets.brand.microsites.netflix.io/assets/493f5bba-81a4-11e9-bf79-066b49664af6_cm_1440w.png?v=8\"\r\n            ></img>\r\n            \r\n            <img\r\n            className=\"avatar\"\r\n            alt=\"logo\"\r\n            src=\"https://upload.wikimedia.org/wikipedia/commons/0/0b/Netflix-avatar.png\"\r\n            ></img>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Navbar\r\n","import React from \"react\";\nimport Row from \"./Row\";\nimport requests from \"./requests\"\nimport Banner from \"./Banner\"\nimport \"./App.css\"\nimport Navbar from \"./Navbar\"\nfunction App() {\n  return (\n    <div className=\"App\">\n      <>\n      <Navbar/>\n      <Banner/>\n    <Row title=\"NETFLIX ORIGINALS\" fetchUrl={requests.fetchNetflixOriginals}\n    isLargeRow></Row>\n    <Row title=\"TRENDING\" fetchUrl={requests.fetchTrending}></Row>\n    <Row title=\"TOP RATED\" fetchUrl={requests.fetchTopRated}></Row>\n    <Row title=\"ACTION MOVIES\" fetchUrl={requests.fetchActionMovies}></Row>\n    <Row title=\"COMEDY MONIES\" fetchUrl={requests.fetchComedyMovies}></Row>\n    <Row title=\"ROMANTIC MOVIE\" fetchUrl={requests.FetchRomnceMovies}></Row>\n    <Row title=\"DOCUMENTRIES\" fetchUrl={requests.fetchDocumentries}></Row>\n     </>\n    </div>\n  );\n}\n\nexport default App\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}